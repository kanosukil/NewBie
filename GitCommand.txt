平时一定要多使用这些基础的命令!
1)、cd  	:改变目录。
2)、cd..	:回退到上-一个目录,直接cd进入默认目录
3)、pwd 	:显示当前所在的目录路径。
4)、ls(ll)	:都是列出当前目录中的所有文件,只不过ll列出的内容更为详细。
5)、touch 	:新建一个文件如touch index.js就会在当前目录下新建一个index.js文件。
6)、rm		:删除一 个文件, rm index.js就会把index.js文件删除。
7)、mkdir	:新建一个目录,就是新建一个文件夹。
8)、rm -r	:删除-一个文件夹, rm -r src删除src目录
rm -rf /切勿在Linux中 尝试!删除电脑中全部文件!

9)、mv		:移动文件, mv index.html src index.html是我们要移动的文件, src是目标文件夹,当然这样写,必须保证文件和目标文件夹在同一目录下。
10)、reset	:重新初始化终端/清屏。
11)、clear	:清屏。
12)、history:查看命令历史。
13)、help	:帮助。
14)、exit	:退出。
15)、#		:表示注释

git配置
查看配置文件
git config -l
git config --system --list #系统配置文件 位置: Git/etc/gitconfig
git config --global --list #用户配置文件 位置: C:/user/xxx(用户名)/.gitconfig
git config --global user.name "用户名"
git config --global user.email "邮箱"

 To 缓存区
git add .
git add 文件夹/
git add 文件名
 To 本地仓库
git commit -m "信息"



.gitignore 文件
# 注释
*.txt 		# 忽略所有.txt文件
!lib.txt 	# 不忽略lib.txt
/temp		# 忽略根目录下的temp文件
build/		# build下的所有都忽略,但不忽略build文件
doc/*.txt	# 忽略doc下一级的txt,但不会忽略非一级的txt
			# e.g. doc/a.txt会被忽略 但doc/b/c.txt
			# 和b/doc/c.txt不会被忽略
**/foo  	# 忽略/foo a/foo b/a/foo等
a/**/b      # 忽略a/b a/c/b a/x/y/b 等
c.exe		# 忽略c.exe文件


git remote -v # 查看当前远程仓库连接状态
# 每个本地仓库都需要单独设置
git remote add 设定名 ssh链接/https链接
git remote rm 设定名

将远程仓库爬拉下来
git clone ssh链接/https链接

git 分支
git branch 				# 查看本地所有分支
git branch -r 			# 查看所有远程分支
git branch 分支名 		# 创建一个新分支但不切换

git checkout -b 分支名	# 创建并切换
# 使用switch更好
git switch -c 分支名 	# 创建并切换
git switch 分支名 		# 切换分支

git checkout 分支名		# 切换分支
git merge 分支名		# 合并指定分支到当前分支
	# 默认快速合并(fast forward)(简单讲就是前移指针)
	# --no--ff 关闭fast forward 使用普通模式合并
	# 快速合并在日志上没有记录 普通合并在日志上有记录\
(git log 等程序键盘上按q退出)
git branch -d 分支名	# 删除分支
git branch -D 分支名 	# 强制删除未合并的分支

git分支产生冲突需要手动协商解决冲突再上传

git stash # 保存现场进栈
git stash list # 查看进栈的现场

git stash apply # 恢复现场但不出栈
git stash drop # 删除栈内现场

git stash pop # 恢复并出栈

git cherry-pick commit的代码 # 将该commit的动作在此分支上再进行一遍

git rm -r --cached . # 将 Git 本地缓存清除